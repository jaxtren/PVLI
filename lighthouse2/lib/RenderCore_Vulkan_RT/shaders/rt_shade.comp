/* rt_shade.glsl - Copyright 2019/2020 Utrecht University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#version 460
#extension GL_GOOGLE_include_directive : require

#include "structures.glsl"
#include "tools.glsl"
#include "material.glsl"
#include "sampling.glsl"

#include "../bindings.h"
#include "compatibility.h"
#if 1
// simple reference bsdf: Lambert plus specular reflection
#include "lambert.h"
#else
// Disney's principled BRDF, adapted from AppleSeed
// For Vulkan, this will need some additional work; the current implementation
// uses templated code.
#include "ggxmdf.h"
#include "disney.h"
#endif
#include "random.glsl"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform State {
	uint path_length;
	uint path_count;
};

layout( set = 0, binding = cCOUNTERS ) buffer Counters
{
	uint pathLength;
	uint scrWidth;
	uint scrHeight;
	uint pathCount;
	uint generated;
	uint extensionRays;
	uint shadowRays;
	uint probePixelIdx;
	int probedInstid;
	int probedTriid;
	float probedDist;
	float clampValue;
	float geometryEpsilon;
	uvec4 lightCounts;
};

layout( set = 0, binding = cAREALIGHT_BUFFER ) buffer areaLightsBuffer { CoreLightTri4 areaLights[]; };
layout( set = 0, binding = cPOINTLIGHT_BUFFER ) buffer pointLightsBuffer { CorePointLight4 pointLights[]; };
layout( set = 0, binding = cSPOTLIGHT_BUFFER ) buffer spotLightsBuffer { CoreSpotLight4 spotLights[]; };
layout( set = 0, binding = cDIRECTIONALLIGHT_BUFFER) buffer directionalLightsBuffer { CoreDirectionalLight4 directionalLights[]; };
layout( set = 0, binding = cCAMERA ) uniform uniformCamera { Camera camera; };

layout( set = 0, binding = cPATH_STATES ) buffer pathStates { vec4 data[]; } states[2];
layout( set = 0, binding = cPATH_ORIGINS )  buffer pathOrigins { vec4 data[]; } origins[2];
layout( set = 0, binding = cPATH_DIRECTIONS ) buffer pathDirections { vec4 data[]; } directions[2];
layout( set = 0, binding = cPATH_THROUGHPUTS ) buffer pathThroughputs { vec4 data[]; } throughputs[2];

layout( set = 0, binding = cPOTENTIAL_CONTRIBUTIONS ) buffer potentialContributionsBuffer { PotentialContribution potentialContributions[]; };
layout( set = 0, binding = cSKYBOX ) uniform sampler2D skybox;
layout( set = 0, binding = cTRIANGLES ) buffer triangleBuffers { CoreTri tdata[]; } tbuffers[MAX_TRIANGLE_BUFFERS];
layout( set = 0, binding = cTRIANGLE_BUFFER_INDICES ) buffer instanceMeshMapping { uint meshIndices[]; };
layout( set = 0, binding = cINVERSE_TRANSFORMS ) buffer instanceInvTransform { mat4 invTransforms[]; };
layout( set = 0, binding = cACCUMULATION_BUFFER ) buffer accumulationBuffer { vec4 acPixels[]; };
layout( set = 0, binding = cBLUENOISE ) buffer   blueNoiseBuffer { int blueNoise[]; };

// path state flags
#define S_SPECULAR		1	// previous path vertex was specular
#define S_BOUNCED		2	// path encountered a diffuse vertex
#define S_VIASPECULAR	4	// path has seen at least one specular vertex

#define HIT_U (float( floatBitsToUint(pathState.x) & 65535) * (1.0f / 65535.0f))
#define HIT_V (float( floatBitsToUint(pathState.x) >> 16) * (1.0f / 65535.0f))
#define INSTANCEIDX floatBitsToInt( pathState.y )
#define PRIMIDX floatBitsToInt( pathState.z )
#define HIT_T pathState.w
#define RAY_O O4.xyz
#define FLAGS data
#define PATHIDX (data >> 8)

#define ISLIGHTS 1
#define MAXISLIGHTS 8

#define AREALIGHTCOUNT        lightCounts.x
#define POINTLIGHTCOUNT       lightCounts.y
#define SPOTLIGHTCOUNT        lightCounts.z
#define DIRECTIONALLIGHTCOUNT lightCounts.w

vec3 RandomBarycentrics( const float r0 );
float PotentialAreaLightContribution( const int idx, const vec3 O, const vec3 N, const vec3 I, const vec3 bary );
float PotentialPointLightContribution( const int idx, const vec3 I, const vec3 N);
float PotentialSpotLightContribution( const int idx, const vec3 I, const vec3 N );
float PotentialDirectionalLightContribution( const int idx, const vec3 I, const vec3 N );
float LightPickProb( const int idx, const vec3 O, const vec3 N, const vec3 I );
float CalculateLightPDF( const vec3 D, const float t, const float lightArea, const vec3 lightNormal );
vec3 RandomPointOnLight( float r0, float r1, const vec3 I, const vec3 N, inout float pickProb, inout float lightPdf, inout vec3 lightColor );
float blueNoiseSampler( uint x, uint y, uint sampleIdx, uint sampleDimension );

void main()
{
	const uint currentIndex = gl_GlobalInvocationID.x;
 	if (currentIndex >= path_count) return; // Respect boundaries

	//const uint shadeBufferIndex = 0; // Buffers used to shade current rays
	//const uint nextBufferIndex = 0; // Buffers used for next extension stage

	const uint shadeBufferIndex = (path_length % 2); // Buffers used to shade current rays
	const uint nextBufferIndex = 1 - shadeBufferIndex; // Buffers used for next extension stage

	const vec4 O4 = origins[shadeBufferIndex].data[currentIndex];
	uint data = floatBitsToUint(O4.w);
	const uint pathIdx = PATHIDX;

	const vec4 pathState = states[shadeBufferIndex].data[currentIndex];
	const vec4 D4 = directions[shadeBufferIndex].data[currentIndex];
	vec4 T4 = pathLength == 1 ? vec4(1.0) /* faster */ : throughputs[shadeBufferIndex].data[currentIndex];

	vec3 throughput = T4.xyz;
	const float bsdfPdf = T4.w;
	const int indices = floatBitsToInt(pathState.z);
	const uint pixelIdx = pathIdx % (scrWidth * scrHeight);
	// initialize depth in accumulator for DOF shader
	if (pathLength == 1) acPixels[pixelIdx].w += (indices == NOHIT) ? 10000 : HIT_T;

	const uint sampleIdx = pathIdx / (scrWidth * scrHeight) + camera.samplesTaken;
	const int instance_id =  INSTANCEIDX;
	const int prim_id = PRIMIDX;

	if (indices == NOHIT) // We didn't hit any geometry
	{
		const vec2 uv = vec2(0.5f * ( 1.0f + atan( D4.x, -D4.z ) * INVPI ), acos( D4.y ) * INVPI);
		vec3 contribution = throughput * texture(skybox, uv).rgb * (1.0f / bsdfPdf);
		CLAMPINTENSITY(contribution, clampValue); // Limit magnitude of throughput vector to combat fireflies
		FIXNAN_VEC3(contribution);
		acPixels[pixelIdx] += vec4(contribution, 0.0);
		return;
	}

	// Object picking
	if (sampleIdx + pathLength == 1 && pixelIdx == probePixelIdx)
	{
		probedInstid = instance_id,	// Record instace id at the selected pixel
		probedTriid = prim_id,		// Record primitive id at the selected pixel
		probedDist = HIT_T;			// Record primary ray hit distance
	}

	const vec3 D = D4.xyz;
	const vec3 I = O4.xyz + HIT_T * D;

	const CoreTri tri = tbuffers[meshIndices[instance_id]].tdata[prim_id];
	ShadingData shadingData;
	vec3 N, iN, fN, T;
	const float coneWidth = camera.up_spreadAngle.w * HIT_T;
	GetShadingData(D, HIT_U, HIT_V, coneWidth, tri, instance_id, shadingData, N, iN, fN, T, mat3(invTransforms[instance_id]));
	const uint flags = shadingData.flags;

	if ((flags & 1) == 1) // Check if object hit was translucent
	{
		if (pathLength < MAXPATHLENGTH) // Create extension ray
		{
			const uint extensionRayIdx = atomicAdd(extensionRays, 1);
			origins[nextBufferIndex].data[extensionRayIdx] = vec4(I + D * geometryEpsilon, O4.w);
			directions[nextBufferIndex].data[extensionRayIdx] = vec4(D, 0.0);
			if (isnan(T4.x) || isnan(T4.y) || isnan(T4.z)) T4.xyz = vec3(0);
			throughputs[nextBufferIndex].data[extensionRayIdx] = T4;
		}
		return;
	}

	// TODO:
	// path regularization
	// if (FLAGS & S_BOUNCED) shadingData.roughness2 = max( 0.7f, shadingData.roughness2 );

	// Terminate path on light
	if (IS_EMISSIVE) /* r, g or b exceeds 1 */
	{
		const float DdotNL = -dot(D, N);
		vec3 contribution = vec3(0);
		if (DdotNL > 0)
		{
			if (pathLength == 1 || (FLAGS & S_SPECULAR) > 0)
			{
				// Only camera rays will be treated special
				contribution = shadingData.color;
			}
			else
			{
				// Last vertex was not specular: apply MIS
				const vec3 lastN = UnpackNormal(floatBitsToUint(D4.w));
				const float lightPdf = CalculateLightPDF( D, HIT_T, tri.T4.w, N );
				const float pickProb = LightPickProb( int(floatBitsToUint(tri.u4.w)), RAY_O, lastN, I /* the N at the previous vertex */ );
				if ((bsdfPdf + lightPdf * pickProb) > 0) contribution = throughput * shadingData.color * (1.0f / (bsdfPdf + lightPdf * pickProb));
			}
		}

		CLAMPINTENSITY(contribution, clampValue);
		FIXNAN_VEC3(contribution);
		acPixels[pixelIdx] += vec4(throughput, 0);
		return;
	}

	// detect specular surfaces
	if (ROUGHNESS <= 0.001f || TRANSMISSION > 0.999f) FLAGS |= S_SPECULAR; /* detect pure speculars; skip NEE for these */ else FLAGS &= ~S_SPECULAR;

	// initialize seed based on pixel index
	uint seed = WangHash(pathIdx * 16789 + camera.samplesTaken * 1791 + pathLength * 720898027 );

	// normal alignment for backfacing polygons
	const float faceDir = (dot( D, N ) > 0) ? -1 : 1;
	if (faceDir == 1) shadingData.transmittance = vec3( 0 );

	throughput *= 1.0f / bsdfPdf; // Applly postponed bsdf pdf

	if ((FLAGS & S_SPECULAR) == 0) // Only cast shadow rays for non-specular objects
	{
		vec3 lightColor;
		float r0, r1, pickProb, lightPdf = 0;
		if (sampleIdx < 2)
		{
			const uint x = (pixelIdx % scrWidth) & 127;
			const uint y = (pixelIdx / scrWidth) & 127;
			r0 = blueNoiseSampler( x, y, int(sampleIdx), 4 + 4 * pathLength );
			r1 = blueNoiseSampler( x, y, int(sampleIdx), 5 + 4 * pathLength );
		}
		else
		{
			r0 = RandomFloat( seed );
			r1 = RandomFloat( seed );
		}

		vec3 L = RandomPointOnLight( r0, r1, I, fN * faceDir, pickProb, lightPdf, lightColor ) - I;
		const float dist = length( L );
		L *= 1.0f / dist;
		const float NdotL = dot( L, fN * faceDir );
		if (NdotL > 0 && lightPdf > 0)
		{
			float bsdfPdf;
		#ifdef BSDF_HAS_PURE_SPECULARS // see note in lambert.h
			const float3 sampledBSDF = EvaluateBSDF( shadingData, fN /* * faceDir */, T, D * -1.0f, L, bsdfPdf ) * ROUGHNESS;
		#else
			const float3 sampledBSDF = EvaluateBSDF( shadingData, fN /* * faceDir */, T, D * -1.0f, L, bsdfPdf );
		#endif
			if (bsdfPdf > 0)
			{
				// calculate potential contribution
				vec3 contribution = throughput * sampledBSDF * lightColor * (NdotL / (pickProb * lightPdf + bsdfPdf));

				CLAMPINTENSITY(contribution, clampValue);
				FIXNAN_VEC3( contribution );

				// Add fire-and-forget shadow ray to the connections buffer
				const uint shadowRayIdx = atomicAdd( shadowRays, 1 ); // compaction

				potentialContributions[shadowRayIdx].Origin = vec4( SafeOrigin( I, L, N * faceDir, geometryEpsilon ), 0 ); // O4
				potentialContributions[shadowRayIdx].Direction = vec4( L, dist - 2.0 * geometryEpsilon ); // D4
				potentialContributions[shadowRayIdx].Emission_pixelIdx = vec4( contribution, uintBitsToFloat( pixelIdx ) ); // E4
			}
		}
	}
	if ((FLAGS & S_BOUNCED) > 0) return; // Cap at one diffuse bounce (because of this we also don't need Russian roulette)

	// Depth cap
	if (pathLength >= MAXPATHLENGTH /* don't fill arrays with rays we won't trace */) return;

	vec3 R;
	float newBsdfPdf, r3, r4;
#ifdef BLUENOISE
	if (sampleIdx < 256) // Blue noise
	{
		const int x = int(pixelIdx % scrWidth) & 127;
		const int y = int(pixelIdx / scrWidth) & 127;
		r3 = blueNoiseSampler( x, y, int(sampleIdx), 6 + 4 * pathLength );
		r4 = blueNoiseSampler( x, y, int(sampleIdx), 7 + 4 * pathLength );
	}
	else
	{
		r3 = RandomFloat( seed );
		r4 = RandomFloat( seed );
	}
#else
	r3 = RandomFloat( seed );
	r4 = RandomFloat( seed );
#endif
	bool specular = false;
	const vec3 bsdf = SampleBSDF( shadingData, fN, N, T, D * -1.0f, HIT_T, r3, r4, R, newBsdfPdf, specular );
	if (newBsdfPdf < EPSILON || isnan( newBsdfPdf )) return; // Early out in case we have an invalid bsdf
	if (specular) FLAGS |= S_SPECULAR;

	const uint extensionRayIdx = atomicAdd( extensionRays, 1 ); // Get compacted index for extension ray

	if ((FLAGS & S_SPECULAR) == 0) FLAGS |= S_BOUNCED;
	else FLAGS |= S_VIASPECULAR;


	origins[nextBufferIndex].data[extensionRayIdx] = vec4( SafeOrigin( I, R, N * faceDir, geometryEpsilon ), uintBitsToFloat( FLAGS ) );
	directions[nextBufferIndex].data[extensionRayIdx] = vec4( R, uintBitsToFloat( PackNormal( fN * faceDir ) /* Pack normal for MIS */) );
	FIXNAN_VEC3(throughput);
	throughputs[nextBufferIndex].data[extensionRayIdx] = vec4( throughput * bsdf * abs( dot( fN * faceDir, R ) ), newBsdfPdf );
}

//  +-----------------------------------------------------------------------------+
//  |  PotentialAreaLightContribution                                             |
//  |  Calculates the potential contribution of an area light.              LH2'19|
//  +-----------------------------------------------------------------------------+
float PotentialAreaLightContribution(
	const int idx, const vec3 O, const vec3 N,
	const vec3 I, const vec3 bary )
{
	// Note: in LH1, lights have an 'enabled' boolean. This functionality does not
	// belong in the core; the RenderSystem should remove inactive lights from the
	// list so the core never encounters them.
	const CoreLightTri4 light = areaLights[idx];
	const vec4 centre4 = light.data0; // holds area light energy in w
	const vec4 LN = light.data1;
	vec3 L = I;
	if (bary.x >= 0)
	{
		const vec4 V0 = light.data3; // vertex0
		const vec4 V1 = light.data4; // vertex1
		const vec4 V2 = light.data5; // vertex2
		L = vec3( bary.x * V0 + bary.y * V1 + bary.z * V2 );
	}
	L -= O;
	const float att = 1.0f / dot( L, L );
	L = normalize( L );
	const float LNdotL = max( 0.0f, -dot( vec3( LN ), L ) );
	const float NdotL = max( 0.0f, dot( N, L ) );
	return AREALIGHT_ENERGY * LNdotL * NdotL * att;
}

//  +-----------------------------------------------------------------------------+
//  |  PotentialPointLightContribution                                            |
//  |  Calculates the potential contribution of a point light.              LH2'19|
//  +-----------------------------------------------------------------------------+
float PotentialPointLightContribution(
		const int idx, const vec3 I, const vec3 N)
{
	const CorePointLight4 light = pointLights[idx];
	const vec4 position4 = light.data0;
	const vec3 L = position4.xyz - I;
	const float NdotL = max( 0.0f, dot( N, L ) );
	const float att = 1.0f / dot( L, L );
	return POINTLIGHT_ENERGY * NdotL * att;
}

//  +-----------------------------------------------------------------------------+
//  |  PotentialSpotLightContribution                                             |
//  |  Calculates the potential contribution of a spot light.               LH2'19|
//  +-----------------------------------------------------------------------------+
float PotentialSpotLightContribution(
	const int idx, const vec3 I, const vec3 N )
{
	const CoreSpotLight4 light = spotLights[idx];
	const vec4 position4 = light.data0;
	const vec4 radiance4 = light.data1;
	const vec4 direction4 = light.data2;
	vec3 L = position4.xyz - I;
	const float att = 1.0f / dot( L, L );
	L = normalize( L );
	const float d = (max( 0.0f, -dot( L, direction4.xyz ) ) - SPOTLIGHT_OUTER) / (SPOTLIGHT_INNER - SPOTLIGHT_OUTER);
	const float NdotL = max( 0.0f, dot( N, L ) );
	const float LNdotL = max( 0.0f, min( 1.0f, d ) );
	return (radiance4.x + radiance4.y + radiance4.z) * LNdotL * NdotL * att;
	// TODO: other lights have radiance4.x+y+z precalculated as 'float energy'. For spots, this
	// does not help, as we need position4.w and direction4.w for the inner and outer angle anyway,
	// so we are touching 4 float4's. If we reduce the inner and outer angles to 16-bit values
	// however, the precalculated energy helps once more, and one float4 read disappears.
}


//  +-----------------------------------------------------------------------------+
//  |  PotentialDirectionalLightContribution                                      |
//  |  Calculates the potential contribution of a directional light.        LH2'19|
//  +-----------------------------------------------------------------------------+
float PotentialDirectionalLightContribution(
	const int idx, const vec3 I, const vec3 N )
{
	const CoreDirectionalLight4 light = directionalLights[idx];
	const vec4 direction4 = light.data0;
	const float LNdotL = max( 0.0f, -(direction4.x * N.x + direction4.y * N.y + direction4.z * N.z) );
	return DIRLIGHT_ENERGY * LNdotL;
}

//  +-----------------------------------------------------------------------------+
//  |  CalculateLightPDF                                                          |
//  |  Calculates the solid angle of a light source.                        LH2'19|
//  +-----------------------------------------------------------------------------+
float CalculateLightPDF(
	const vec3 D, const float t, const float lightArea, const vec3 lightNormal )
{
	return (t * t) / (-dot( D, lightNormal ) * lightArea);
}

float LightPickProb( const int idx, const vec3 O, const vec3 N, const vec3 I )
{
#if ISLIGHTS
	// for implicit connections; calculates the chance that the light would have been explicitly selected
	float potential[MAXISLIGHTS];
	float sum = 0;
	for (int i = 0; i < AREALIGHTCOUNT; i++) { float c = PotentialAreaLightContribution( i, O, N, I, vec3( -1 ) ); potential[i] = c; sum += c; }
	for (int i = 0; i < POINTLIGHTCOUNT; i++) { float c = PotentialPointLightContribution( i, O, N ); sum += c; }
	for (int i = 0; i < SPOTLIGHTCOUNT; i++) { float c = PotentialSpotLightContribution( i, O, N ); sum += c; }
	for (int i = 0; i < DIRECTIONALLIGHTCOUNT; i++) { float c = PotentialDirectionalLightContribution( i, O, N ); sum += c; }
	if (sum <= 0) return 0; // no potential lights found
	return potential[idx] / sum;
#else
	return 1.0f / AREALIGHTCOUNT; // should I include delta lights?
#endif
}

//  +-----------------------------------------------------------------------------+
//  |  RandomBarycentrics                                                         |
//  |  Helper function for selecting a random point on a triangle. From:          |
//  |  https://pharr.org/matt/blog/2019/02/27/triangle-sampling-1.html      LH2'19|
//  +-----------------------------------------------------------------------------+
vec3 RandomBarycentrics( const float r0 )
{
	const uint uf = uint(r0 * uint(4294967295 ));			// convert to 0:32 fixed point
	vec2 A = vec2( 1, 0 ); // barycentrics
	vec2 B = vec2( 0, 1 ); // barycentrics
	vec2 C = vec2( 0, 0 ); // barycentrics

	for (int i = 0; i < 16; ++i)						// for each base-4 digit
	{
		const int d = int((uf >> (2 * (15 - i))) & 0x3);		// get the digit
		vec2 An, Bn, Cn;
		switch (d)
		{
		case 0: An = (B + C) * 0.5f; Bn = (A + C) * 0.5f; Cn = (A + B) * 0.5f; break;
		case 1: An = A; Bn = (A + B) * 0.5f; Cn = (A + C) * 0.5f; break;
		case 2: An = (B + A) * 0.5f; Bn = B; Cn = (B + C) * 0.5f; break;
		case 3: An = (C + A) * 0.5f; Bn = (C + B) * 0.5f; Cn = C; break;
		}
		A = An, B = Bn, C = Cn;
	}
	const vec2 r = (A + B + C) * 0.3333333f;
	return vec3( r.x, r.y, 1 - r.x - r.y );
}

//  +-----------------------------------------------------------------------------+
//  |  RandomPointOnLight                                                         |
//  |  Selects a random point on a random light. Returns a position, a normal on  |
//  |  the light source, the probability that this particular light would have    |
//  |  been picked and the importance of the explicit connection.           LH2'19|
//  +-----------------------------------------------------------------------------+
vec3 RandomPointOnLight( float r0, float r1, const vec3 I, const vec3 N,
	inout float pickProb, inout float lightPdf, inout vec3 lightColor )
{
	const float lightCount = AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT + DIRECTIONALLIGHTCOUNT;
	// predetermine the barycentrics for any area light we sample
	vec3 bary = RandomBarycentrics( r0 );
#if ISLIGHTS
	// importance sampling of lights, pickProb is per-light probability
	float potential[MAXISLIGHTS];
	float sum = 0, total = 0;
	int lights = 0, lightIdx = 0;
	for (int i = 0; i < AREALIGHTCOUNT; i++) { float c = PotentialAreaLightContribution( i, I, N, vec3( 0 ), bary ); potential[lights++] = c; sum += c; }
	for (int i = 0; i < POINTLIGHTCOUNT; i++) { float c = PotentialPointLightContribution( i, I, N ); potential[lights++] = c; sum += c; }
	for (int i = 0; i < SPOTLIGHTCOUNT; i++) { float c = PotentialSpotLightContribution( i, I, N ); potential[lights++] = c; sum += c; }
	for (int i = 0; i < DIRECTIONALLIGHTCOUNT; i++) { float c = PotentialDirectionalLightContribution( i, I, N ); potential[lights++] = c; sum += c; }
	if (sum <= 0) // no potential lights found
	{
		lightPdf = 0;
		return vec3( 1 /* light direction; don't return 0 or nan, this will be slow */ );
	}
	r1 *= sum;
	for (int i = 0; i < lights; i++)
	{
		total += potential[i];
		if (total >= r1) { lightIdx = i; break; }
	}
	pickProb = potential[lightIdx] / sum;
#else
	// uniform random sampling of lights, pickProb is simply 1.0 / lightCount
	pickProb = 1.0f / lightCount;
	int lightIdx = int(r0 * lightCount);
	r0 = (r0 - float(lightIdx) * (1.0f / lightCount)) * lightCount;
#endif
	lightIdx = clamp( lightIdx, 0, int(lightCount) - 1 );
	if (lightIdx < AREALIGHTCOUNT)
	{
		// pick an area light
		const CoreLightTri4 light = areaLights[lightIdx];
		const vec4 V0 = light.data3;			// vertex0
		const vec4 V1 = light.data4;			// vertex1
		const vec4 V2 = light.data5;			// vertex2
		lightColor = vec3( light.data2 );	// radiance
		const vec4 LN = light.data1;			// N
		const vec3 P = bary.x * V0.xyz + bary.y * V1.xyz + bary.z * V2.xyz;
		vec3 L = I - P; // reversed: from light to intersection point
		const float sqDist = dot( L, L );
		L = normalize( L );
		const float LNdotL = dot(L, LN.xyz);
		const float reciSolidAngle = sqDist / (LN.w * LNdotL); // LN.w contains area
		lightPdf = (LNdotL > 0 && dot( L, N ) < 0) ? reciSolidAngle : 0;
		return P;
	}
	else if (lightIdx < (AREALIGHTCOUNT + POINTLIGHTCOUNT))
	{
		// pick a pointlight
		const CorePointLight4 light = pointLights[lightIdx - AREALIGHTCOUNT];
		const vec3 pos = vec3( light.data0 );			// position
		const vec3 lightColor = vec3( light.data1 );	// radiance
		const vec3 L = I - pos; // reversed
		const float sqDist = dot( L, L );
		lightPdf = dot( L, N ) < 0 ? sqDist : 0;
		return pos;
	}
	else if (lightIdx < (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT))
	{
		// pick a spotlight
		const CoreSpotLight4 light = spotLights[lightIdx - (AREALIGHTCOUNT + POINTLIGHTCOUNT)];
		const vec4 P = light.data0;			// position + cos_inner
		const vec4 E = light.data1;			// radiance + cos_outer
		const vec4 D = light.data2;			// direction
		const vec3 pos = P.xyz;
		vec3 L = I - P.xyz;
		const float sqDist = dot( L, L );
		L = normalize( L );
		const float d = max(0.0f, dot(L, D.xyz) - E.w) / (P.w - E.w);
		const float LNdotL = min( 1.0f, d );
		lightPdf = (LNdotL > 0 && dot( L, N ) < 0) ? (sqDist / LNdotL) : 0;
		lightColor = E.xyz;
		return pos;
	}
	else
	{
		// pick a directional light
		const CoreDirectionalLight4 light = directionalLights[lightIdx - (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT)];
		const vec3 L = light.data0.xyz;	// direction
		lightColor = light.data1.xyz;		// radiance
		const float NdotL = dot( L, N );
		lightPdf = NdotL < 0 ? 1 : 0;
		return I - 1000.0f * L;
	}
}

float blueNoiseSampler( uint x, uint y, uint sampleIdx, uint sampleDimension )
{
	// wrap arguments
	x &= 127;
	y &= 127;
	sampleIdx &= 255;
	sampleDimension &= 255;

	// xor index based on optimized ranking
	uint rankedSampleIndex = (sampleIdx ^ blueNoise[sampleDimension + (x + y * 128) * 8 + 65536 * 3]) & 255;

	// fetch value in sequence
	uint value = blueNoise[sampleDimension + rankedSampleIndex * 256];

	// if the dimension is optimized, xor sequence value based on optimized scrambling
	value ^= blueNoise[(sampleDimension & 7) + (x + y * 128) * 8 + 65536];

	// convert to float and return
	return (0.5f + value) * (1.0f / 256.0f);
}